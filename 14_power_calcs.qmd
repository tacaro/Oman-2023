---
title: "14: Power Calculations"
format: pdf
editor: visual
editor_options: 
  chunk_output_type: console
include-in-header: \usepackage[makeroom]{cancel}
bibliography: references.bib
---

## Setup

```{r}
rm(list=ls()) # clear the environment
library(tidyverse)
source("source/theme_om23.R")
source("source/color_palettes.R")
```

Load files

```{r}
# 13C-nanoSIMS-SIP dataset from cache
assim_data <- read_rds("cache/SIMS_assim_data.RDS") |> 
  # trim out columns not needed for this exercise:
  select(sample_id, well, depth, amendment, F13C, mu.d, 
         gen.d, K, cell.C.fg, rC.fmol.d)

# Hoehler et al. 2023 SI dataset
msp_lit_data <- 
  readxl::read_excel("data/Hoehler_SI_Data1.xlsx", sheet = 2) |> 
  mutate(
    MSP_W_gC = `Metabolic Rate (W, at 25C)` / `Carbon Mass (g)`
  )

# Inspect the Hoehler et al. data
msp_lit_data |> 
  filter(!is.na(Kingdom)) |> 
  ggplot(
    aes(
      x = `Carbon Mass (g)`,
      y = `Metabolic Rate (W, at 25C)`,
      color = Kingdom
    )
  ) +
  geom_point() +
  scale_x_log10() +
  scale_y_log10() +
  theme_bw() +
  theme(
    panel.grid = element_blank()
  )

```

# Energy requirement calculations

Hoehler et al. in their 2023 paper [@hoehler2023] consider the specific carbon turnover rate $\mu^*$ in mass carbon biomass synthesized $(C_{biosynthesis})$ per unit time per mass of standing biomass carbon ($C_{biomass}$). Consider mass in grams and time in seconds:

$$
\mu^* = g \: C_{biosynthesis} \times (s \times \: g \: C_{biomass})^{-1} 
\quad \quad (Eq. 1)
$$

Dividing $\mu^*$ by MSP cancels the terms of time and standing biomass $(s^{-1} \times g \: C^{-1}_{biomass})$ giving a quantity representing biomass synthesized per unit energy $(g \: C_{biosynthesis} \: J^{-1})$ which they refer to as biosynthesis yield, or $Y^*$.

$$
Y^* = \frac{\mu^*}{MSP} = \frac{g \: C_{biosynthesis} \times s^{-1} \times g \: C_{biomass}^{-1}}{J \times s^{-1} \times g \: C_{biomass}^{-1} } =\frac{g \: C_{biosynthesis}}{J} \quad \quad (Eq. 2)
$$

which can be expressed in kilojoules instead of Joules:

$$
Y^* = \frac{g \: C_{biosynthesis}}{J} \times \frac{1J}{1000 kJ} = g \: C_{biosynthesis} \: kJ^{-1}
\quad \quad (Eq. 3)
$$

$Y^*$ relates carbon turnover to energy utilization.

Hoehler et al. find that biosynthesis yield $(Y^*)$ for anaerobic organisms is related to mass-specific carbon turnover rate $(yr^{-1})$ by the relationship

$$
Y^* = \frac{0.03 \pm 0.017 \: g \: C_{biosynthesis}}{kJ} \times \frac{10 ^{-3} kJ}{1J} = 
\frac{0.00003 \pm 0.000017 \: g \: C }{J}
\quad \quad (Eq. 4)
$$

Using this relationship, we can approximate the mass-specific power of the organisms in each sampling environment by using this relationship. By rearranging $Y^* = \mu^* / MSP$ we get:

$$
MSP = \frac{\mu^*}{Y^*}
\quad \quad (Eq. 5)
$$

From our data, we have reliable estimates of the standing biomass $(fg \: C_{biomass})$ at the single cell level calculated from nanoSIMS images. We also have estimates for the biosynthesis/turnover rates $(fg \: C_{biomass})$ of carbon. Therefore, we can calculate $\mu^*$ as follows:

$$
\begin{aligned}
\mu^* &= \frac{fg \: C_{biosynthesis}}{day \times fg \: C_{biomass}} \times \frac{1 \:day}{86400 \: s} \times
= \frac{fg \: C_{biosynthesis}}{s \times fg \: C_{biomass}} 
\times \frac{10^{15} fgC_{biomass}}{1gC_{biomass}}
\times \frac{1gC_{biosynthesis}}{10^{15} fgC_{biosynthesis}} = \\ 
&\downarrow \\
\mu^* &= g \: C_{biosynthesis} \times (s \times g \: C_{biomass})^{-1}
\quad \quad (Eq. 6)
\end{aligned}
$$

And using the power law Hoehler et al. define for biosynthesis yield:

$$
\begin{aligned}
Y^*[g \: C_{biosynthesis} J^{-1}] &= 
\frac{\mu ^*[g \: C_{biosynthesis} \times (s \times g \: C_{biomass})^{-1} ]}
{MSP[ J \times s^{-1} \times g \: C_{biomass}^{-1}]} \\
&\downarrow \\
0.0000003 \pm 17 \: g \: C_{biosynthesis} \times J^{-1} &= 
\frac{
\mu ^*[g \: C_{biosynthesis} \times (s \times g \: C_{biomass})^{-1} ]}
{MSP[ J \times s^{-1} \times g \: C_{biomass}^{-1}]
} \\
&\downarrow \\
{MSP[ J \times s^{-1} \times g \: C_{biomass}^{-1}]} &= 
\frac{
\mu ^*[g \: C_{biosynthesis} \times (s \times g \: C_{biomass})^{-1} ]}
{0.00003 \pm 0.000017 \: g \: C_{biosynthesis} \times J^{-1}
} 
\quad \quad (Eq. 7)
\end{aligned}
$$

## Calculate MSP

```{r}
#| label: calculate mu star and MSP


assim_data_summary <- assim_data |> 
  filter(amendment != "negative control") |> # remove negative control data
  select(-c(F13C, K, sample_id)) |> # clean up columns
  rename(fmolC_per_cell_day = rC.fmol.d, TG.d = gen.d) |> # rename to intuitive name
  mutate(
    gC_biomass = cell.C.fg / 1e15, # grams of cell biomass from femtograms
    fg_C_per_cell_day = fmolC_per_cell_day * 12.011, # fg assimilated from fmol
    # Eq. 6:
    gC_biosynthesis.day = fg_C_per_cell_day / 1e15, # gC per day from fg per day
    gC_biosynthesis.sec = gC_biosynthesis.day / 86400, # gC per second from gC per day
    mu_star.sec = gC_biosynthesis.sec / gC_biomass, # turnover rate in seconds-1
    mu_star.day = mu_star.sec * 86400, # convert from seconds-1 to days-1
    mu_star.yr = mu_star.day * 365, # convert from days-1 to -1
    # Eq. 7:
    MSP.J_s_g = mu_star.sec / 0.00003,
    MSP.J_s_g_lower = mu_star.sec / (0.00003 - 0.000017),
    MSP.J_s_g_upper = mu_star.sec / (0.00003 + 0.000017),
  ) |> 
  # Factor our metadata for better plotting:
  mutate(
    well = factor(well, levels = c("BA1B", "BA4A", "BA3A")),
    depth_str = factor(case_when(
      depth == 20 ~ "Shallow (20m)",
      depth == 150 ~ "Intermediate (150m)",
      depth == 250 ~ "Deep (250/270m)",
      depth == 270 ~ "Deep (250/270m)"),
      levels = c("Deep (250/270m)", "Intermediate (150m)", "Shallow (20m)")
    ),
    amendment = factor(amendment, levels = c("bicarbonate", "acetate", "formate"))
  )
```

```{r}
#| label: plot mu star (carbon turnover rate)
#| code-fold: true

assim_data_summary |> 
  filter(mu_star.yr > 0) |> 
  ggplot(
    aes(
      x = mu_star.yr,
      y = depth_str,
      color = amendment
    )
  ) +
  # geom_point(
  #   position = position_jitterdodge(jitter.height = 0.2),
  #   alpha = 0.5
  #   ) +
  ggdist::stat_pointinterval(point_interval = "mean_qi", color = "black") +
  scale_x_log10(
    breaks = c(1e-4, 1e-3, 1e-2, 1e-1, 1e0, 1e1),
    labels = scales::trans_format("log10", scales::math_format(10^.x)),
    ) +
  coord_cartesian(xlim = c(1e-4, 1e1)) +
  annotation_logticks(sides = "b") +
  scale_color_manual(values = well_palette) +
  facet_grid(amendment~well) +
  labs(
    x = latex2exp::TeX("Mass-specific carbon turnover rate $[yr^{-1}]$"),
    y = ""
  ) +
  theme_om23() + 
  theme(
    panel.spacing = unit(0.15, "cm"),
    legend.position = "None"
  )
```

```{r}
#| label: plot MSP
#| code-fold: true

p_MSP <- assim_data_summary |> 
  filter(mu_star.yr > 0) |> 
  ggplot(
    aes(
      x = MSP.J_s_g,
      y = depth_str,
      color = well
    )
  ) +
  ggdist::stat_pointinterval(point_interval = "mean_qi") +
  annotation_logticks(sides = "b") +
  scale_x_log10(breaks = c(1e-5, 1e-3, 1e-1),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_color_manual(values = well_palette) +
  facet_grid(well~amendment) +
  labs(
    x = latex2exp::TeX("MSP $[W \\cdot gC_{biomass}^{-1}]$"),
    y = ""
  ) +
  theme_om23() + 
  theme(
    panel.spacing = unit(0.15, "cm"),
    legend.position = "None"
  )
p_MSP

# cowplot::save_plot(plot = p_MSP, filename = "fig_output/MSP.pdf",
#                    base_height = 4, base_width = 6)
```

Inspecting our data, it is clear that estimates of mass-specific carbon turnover diverge slightly from estimates of biomass generation time. The distinction between these two metrics is that biomass carbon turnover assumes a steady state pool of Carbon. In other words, microbial biomass is not increasing at the aggregate level. When we estimate microbial *growth rate*, we are assuming that cellular division takes place and that microbial biomass is increasing. The growth rate and generation time calculations introduce a natural log term to account for clonal growth. We can see how these values diverge by plotting the "generation rate" (number of cellular generations per year) versus the mass-specific carbon turnover rate (number of cell carbon turnovers per year) where generation rate is defined as the inverse of generation time. Generation time is calculated via the specific growth rate $(\mu_{growth})$ that assumes clonal cell growth:

$$
T_G = ln(2)/\mu_{growth}
\\ G_R = 1 / T_G
$$

```{r}
#| code-fold: true
#| label: plot mu star vs generation rate
assim_data_summary |> 
  filter(mu_star.yr > 0) |> 
  mutate(TG.yr = TG.d / 365) |> 
  ggplot(
    aes(
      x = mu_star.yr,  # 
      y = 1/TG.yr,
      color = well
    )
  ) +
  geom_abline(color = "black") +
  geom_line() +
  scale_color_manual(values = amendment_palette) +
  coord_cartesian(xlim = c(0, 15), ylim = c(0, 15)) +
  labs(
    x = latex2exp::TeX("Mass-specific carbon turnover rate $[yr^{-1}]$"),
    #y = latex2exp::TeX("Generation rate $[yr^{-1}]$")
  ) +
  theme_bw() +
  theme(aspect.ratio = 1)
```

## From energy requirements to metabolic flux

We can use the energy requirements calculated here, and the mass of carbon in a cell, to estimate H2 oxidation rates. From our nanoSIMS data, we have estimates of the cell-specific biomass and can therefore convert into cell-specific power (CSP).

$$
CSP[J \times s^{-1} \times cell^{-1}] = MSP [J \times s^{-1} \times gC_{biomass}^{-1}] \times \frac{gC_{biomass}}{cell} \quad \quad (Eq. 8)
$$

We can calculate an energy requirement in Joules per cubic cm of rock (volume-specific power, VSP) by multiplying the cell density by the CSP:

$$
VSP [J \times s^{-1} \times (cm^3)^{-1}] = CSP[J \times s^{-1} \times cell^{-1}]  \times \frac{cell}{cm^3_{rock}} \times a \quad \quad (Eq. 9)
$$

We use the average value of $10^5$ cells per $cm^3$ of rock (adjusted for the relative abundance of *Methanobacterium,* $(0 < a < 1)$*)* and convert VSP to units of Joules per cubic km per year as follows:

$$
VSP[J \times yr^{-1} \times km^3] = VSP[J \times s^{-1} \times (cm^3)^{-1}] \times \frac{3.154\times 10^7 \: s}{yr} \times \frac{10^{15}cm^3}{km^3}
\quad \quad (Eq. 10)
$$

We can then apply an estimate of $2.393 \times 10^{10}$ Joules produced per tonne $H_2$ consumed in methanogenesis, calculated from the maximum ∆G of $H_2 + 4CO_2 \rightarrow CH_4 + 2H_2O$ under far from equilibrium conditions [@leong2020], we can calculate a volume-specific $H_2$ oxidation rate:

$$
H_2 \: \left( tonnes \times (km^3 \times yr)^{-1} \right) = VSP \left(J \times (km^3 \times yr)^{-1} \right) \times \frac{1 \: tonne \:H_2}{2.393 \times 10^{10} J} \quad \quad (Eq. 11)
$$

...

$$
H_2[tonnes \times (km^3 \times yr)^{-1}] = VSP[J \times (km^3 \times yr)^{-1}] \times \frac{1 mol \: H_2}{4850 \: J}
\times \frac{2.01568 \: g \: H_2}{1 mol \: H_2} \times \frac{1 \: tonne}{10^6 \: g}
$$

How much CH4 is produced per tonne H2 oxidized?

$$
1 \: tonne \: H_2 \times \frac{10^6 g \: H_2}{1 tonne H2} \times \frac{1 mol H_2}{2.01568 g \: H_2}
\times \frac{1 mol CH_4}{4 mol H_2} \times \frac{16.04 g \: CH_4}{1 mol \: CH_4} \times \frac{1 tonne \: CH_4}{10^6 g \: CH_4}
$$

```{r}
tonne_h2_to_tonne_ch4 <- function(H2_tonnes) {
  ch4_tonnes = H2_tonnes * 1e6 * (1/2.01568) * (1/4) * (16.04) * (1/1e6)
  return(ch4_tonnes)
}
```

```{r}
#| label: calculate H2 oxidation rate

# import methanobacterium abundance
mb_abund <- readxl::read_excel("data_output/methanobacterium_abund.xlsx") |> 
  mutate(depth = parse_number(depth_m)) |> select(well, depth, sum_abund)

assim_metabolic <- assim_data_summary |> 
  left_join(mb_abund, by = join_by(well, depth)) |> 
  ## Example calculation
  # bind_rows(
  #   tibble(MSP.J_s_g = 1E-3,
  #          cell.C.fg = 67,
  #          sum_abund = 0.11)
  # ) |> 
  mutate(
    # convert cell biomass in fg to g
    cell.C.g = cell.C.fg / 1e15,
    # calculate cell-specific power (Eq. 8)
    CSP.J_s_cell = MSP.J_s_g * cell.C.g, 
    # calculate VSP (Eq. 9) (cells to volume)
    VSP.J_s_cm3 = CSP.J_s_cell * 1e5, 
    # adjusted for mb rel abund
    VSP.J_s_cm3_ADJ = CSP.J_s_cell * 1e5 * sum_abund, 
    # VSP unit scaling (Eq. 10): J/yr/km3 from J/sec/cm
    VSP.J_yr_km3 = VSP.J_s_cm3 * 3.154e7 * 1e15, 
    # Adjusted for mb abund
    VSP.J_yr_km3_ADJ = VSP.J_s_cm3_ADJ * 3.154e7 * 1e15, 
    # H2oxidation mass from VSP (Eq. 11)
    MA_H2ox.tonnes_yr_km3 = VSP.J_yr_km3 / 2.393e10, 
    # H2oxidation from VSP  (Eq. 11) adjusted for mb abund
    MA_H2ox.tonnes_yr_km3_ADJ = VSP.J_yr_km3_ADJ / 2.393e10, 
    # CH4 production from stoichiometry of methanogenesis:
    MA_CH4.tonnes_yr_km3 = tonne_h2_to_tonne_ch4(MA_H2ox.tonnes_yr_km3),
    # adjusted for mb abund
    MA_CH4.tonnes_yr_km3_ADJ = tonne_h2_to_tonne_ch4(MA_H2ox.tonnes_yr_km3_ADJ) 
  )


```

### H2 vs. CH4 stoich

```{r}
library(ggpmisc)

assim_metabolic |> 
  ggplot(
    aes(
      x = MA_H2ox.tonnes_yr_km3,
      y = MA_CH4.tonnes_yr_km3
    )
  ) +
  geom_smooth(method = "lm") +
  geom_point() +
  coord_cartesian(xlim = c(0,1200), ylim = c(0, 1200)) +
  geom_abline(slope = 1, linetype = "dotted") +
  labs(
    x = "H2 oxidized (tonnes/yr/km3)",
    y = "CH4 produced (tonnes/yr/km3)"
  ) +
  theme_classic() +
  theme(
    aspect.ratio = 1
  )

```

### Histogram of VSP

```{r}

# histogram of VSP
assim_metabolic |> 
  ggplot(
    aes(x = VSP.J_yr_km3_ADJ)
  ) +
  coord_cartesian(expand = FALSE) +
  geom_histogram(fill = "blue", alpha = 0.5) +
  geom_histogram(aes(x = VSP.J_yr_km3), fill = "red", alpha = 0.5) +
  geom_vline(xintercept = 9.5E10, color = "black", linetype = "dashed") +
  scale_x_log10() +
  annotation_logticks(sides = "b") +
  theme_classic() +
  labs(
    x = "VSP (J/yr/km3)",
    caption = "Blue: adjusted for Methanobacterium relative abundance \n
    Red: Assumes all cells are Methanobacterium \n
    Dashed line is VSP in Templeton et al. 2024"
  )
```

### histogram of turnover rates

```{r}
assim_metabolic |> 
  ggplot(
    aes(
      x = mu_star.yr
    )
  ) +
  geom_histogram() +
  scale_x_log10(
    labels = scales::trans_format("log10", scales::math_format(10^.x)),
    breaks = c(1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1e0, 1e1)) +
  annotation_logticks(sides = "b") +
  theme_classic() +
  labs(
    x = "µ* (mass specific carbon turnover per year)"
  )
```

### Plot H2 and CH4 rates

```{r}
#| label: plot H2 oxidation and CH4 production rate
#| code-fold: true

p_h2_ch4 <- assim_metabolic |> 
  filter(mu_star.yr > 0) |> 
  filter(amendment == "bicarbonate") |> 
  pivot_longer(cols = c(MA_CH4.tonnes_yr_km3_ADJ, MA_H2ox.tonnes_yr_km3_ADJ),
               values_to = "tonne_km3_yr",
               names_to = "Gas") |> 
  mutate(
    Gas = case_when(Gas == "MA_CH4.tonnes_yr_km3_ADJ" ~ "Methane",
                    Gas == "MA_H2ox.tonnes_yr_km3_ADJ" ~ "Hydrogen")
  ) |> 
  ggplot(
    aes(
      x = tonne_km3_yr,
      y = depth_str,
      fill = Gas
    )
  ) +
  ggdist::stat_halfeye(
    slab_alpha = 1,
    position = position_dodge(width = 0.5)) +
  annotation_logticks(sides = "b") +
  scale_x_log10(
    labels = scales::trans_format("log10", scales::math_format(10^.x)),
    breaks = c(1e-4, 1e-3, 1e-2, 1e-1, 1e0, 1e1, 1e2, 1e3)) +
  coord_cartesian(xlim = c(1e-4, 1e3)) +
  scale_fill_brewer(palette = "Set1") +
  facet_grid(well~Gas) +
  labs(
    x = latex2exp::TeX("$tonnes \\cdot (km^3 \\cdot yr)^{-1}$"),
    y = "",
    #caption = "Red line indicates estimate of Templeton et al. (2024): 3.95"
  ) +
  theme_bw() + 
  theme(
    panel.spacing = unit(0.15, "cm"),
    legend.position.inside = c(0.2, 0.5),
    legend.position = "None",
    panel.grid.minor = element_blank(),
    panel.grid.major.y = element_blank(),
    strip.background = element_rect(fill = "black"),
    strip.text = element_text(color = "white")
  )
p_h2_ch4


# cowplot::save_plot(plot = p_h2, filename = "fig_output/h2_ox_tonnes_ADJ.pdf",
#                    base_height = 6, base_width = 8)
```

Adjusted values:

```{r}
gt_landscape <- assim_metabolic |> 
  filter(mu_star.yr > 0) |> 
  filter(amendment == "bicarbonate") |> 
  group_by(well, depth_str) |> 
  summarise(
    median_h2_ox = median(MA_H2ox.tonnes_yr_km3_ADJ, na.rm = TRUE),
    median_ch4_prod = median(MA_CH4.tonnes_yr_km3_ADJ, na.rm = TRUE),
    max_h2_ox = max(MA_H2ox.tonnes_yr_km3_ADJ, na.rm = TRUE),
    min_h2_ox = min(MA_H2ox.tonnes_yr_km3_ADJ, na.rm = TRUE),
    max_ch4_prod = max(MA_CH4.tonnes_yr_km3_ADJ, na.rm = TRUE),
    min_ch4_prod = min(MA_CH4.tonnes_yr_km3_ADJ, na.rm = TRUE),
  ) |> 
  select(well, depth_str, median_h2_ox, min_h2_ox, max_h2_ox, median_ch4_prod, min_ch4_prod, max_ch4_prod) |>
  arrange(desc(depth_str)) |> 
  gt::gt() |> 
  gt::tab_spanner(
    label = "{{CH_4 Produced tonnes km^-1 yr^-1}}",
    columns = c(median_ch4_prod, min_ch4_prod, max_ch4_prod)
  ) |> 
  gt::tab_spanner(
    label = "{{H_2 tonnes km^-1 yr^-1}}",
    columns = c(median_h2_ox, min_h2_ox, max_h2_ox)
  ) |> 
  gt::data_color(columns = (-depth_str), palette = "Blues") |> 
  gt::cols_label(
    depth_str = "",
    median_h2_ox = "median",
    median_ch4_prod = "median",
    max_h2_ox = "Max",
    max_ch4_prod = "Max",
    min_ch4_prod = "Min",
    min_h2_ox = "Min"
  ) |> 
  gt::fmt_scientific()

gt_landscape

gt::gtsave(gt_landscape, filename = "data_output/gt_landscape.html")
```

Un-adjusted values:

```{r}
assim_metabolic |> 
  filter(mu_star.yr > 0) |> 
  filter(amendment == "bicarbonate") |> 
  group_by(well, depth_str) |> 
  summarise(
    median_h2_ox = median(MA_H2ox.tonnes_yr_km3, na.rm = TRUE),
    median_ch4_prod = median(MA_CH4.tonnes_yr_km3, na.rm = TRUE),
    max_h2_ox = max(MA_H2ox.tonnes_yr_km3, na.rm = TRUE),
    min_h2_ox = min(MA_H2ox.tonnes_yr_km3, na.rm = TRUE),
    max_ch4_prod = max(MA_CH4.tonnes_yr_km3, na.rm = TRUE),
    min_ch4_prod = min(MA_CH4.tonnes_yr_km3, na.rm = TRUE),
  ) |> 
  select(well, depth_str, median_h2_ox, min_h2_ox, max_h2_ox, median_ch4_prod, min_ch4_prod, max_ch4_prod) |> 
  arrange(desc(depth_str)) |> 
  gt::gt() |> 
  gt::tab_spanner(
    label = "{{CH_4 Produced tonnes km^-1 yr^-1}}",
    columns = c(median_ch4_prod, min_ch4_prod, max_ch4_prod)
  ) |> 
  gt::tab_spanner(
    label = "{{H_2 tonnes km^-1 yr^-1}}",
    columns = c(median_h2_ox, min_h2_ox, max_h2_ox)
  ) |> 
  gt::data_color(columns = (-depth_str), palette = "Blues") |> 
  gt::cols_label(
    depth_str = "",
    median_h2_ox = "median",
    median_ch4_prod = "median",
    max_h2_ox = "Max",
    max_ch4_prod = "Max",
    min_ch4_prod = "Min",
    min_h2_ox = "Min"
  ) |> 
  gt::fmt_scientific()
```

The value estimated by Templeton et al. (2024) of 3.95 tonnes $H_2/km^3/yr$, appears to be an under-estimate of hydrogen oxidation via methanogenesis. The cause of this is that Templeton et al. assume a cellular turnover rate of 1 $yr^{-1}$, a slower turnover rate than what is actually observed in many parts of the system.

Our estimates display substantial variability in volume-specific hydrogen oxidation. The sources of this variability arises from the data itself: microbial carbon turnover rates in the system are highly heterogeneous across space and depth.

# Compare to literature basal limits

Lever et al. 2015 estimate the energy turnover requirements of amino acid racemization during four different scenarios (see Fig. 11, dashed lines). These four scenarios cover a range of protein repair scenarios depending on whether an organism repairs single AAs or has to repair larger (up to whole) chunks of protein.

We can use the following values for energy requirements of Racemization at 35˚C:

Scenario 1: 5E-17 kJ/cell/yr

Scenario 2: 2E-16 kJ/cell/yr

Scenario 3: 9E-16 kJ/cell/yr

Scenario 4: 5E-15 kJ/cell/yr

To convert these to mass-specific power, we apply the following transformation:

$$
\begin{aligned}
\text{Energy Turnover} \left(kJ \cdot cell^{-1} \cdot yr^{-1} \right)\\
&\downarrow\\
\frac{kJ}{cell \cdot yr} \times \frac{1000J}{kJ} &= \frac{J}{cell \cdot yr} \\
&\downarrow \\
\frac{J}{cell \cdot yr} \times \frac{cell}{gC} &= \frac{J}{gC \cdot yr} \\
&\downarrow \\
\frac{J}{gC \cdot yr} \times \frac{yr}{31536000 \: sec} &= \frac{J}{gC \cdot sec} \\
&\downarrow \\
&MSP \left(\frac{W}{gC} \right)
\end{aligned}
$$

In other words, convert kJ to J, convert cell to carbon with a cell-to-carbon ratio, then convert yr to seconds, and bam, we've got MSP in Hoehler et al. terms (watts per gram carbon).

The only unknown multiplication factor in this is cell-to-carbon ratio. But what cell-to-carbon ratio should we use? Let's just take the mean from our entire study as a rough estimate. These are order-of-magnitude differences in maintenance based on different AA repair and the amount of C per cell (30 to 100 fg) shouldn't be a massive difference.

```{r}
mean_cell_mass_fgC <- assim_data |> select(cell.C.fg) |> pull() |> mean()
mean_cell_mass_gC <- mean_cell_mass_fgC * 1E-15 # convert from fg to g
paste("The mean cell biomass measured in this study is", round(mean_cell_mass_fgC, 1), "fg or", mean_cell_mass_gC, "g C")


```

Tabulate Mark Lever's energy requirements and convert to MSP

```{r}
# have it be a function
energy_turnover_to_MSP <- function(kJ_per_cell_yr, cell_mass_gC) {
  J_per_cell_yr = kJ_per_cell_yr * 1000 # 1000 J per kJ
  J_per_gC_yr = J_per_cell_yr * (1/cell_mass_gC)
  W_gC = J_per_gC_yr * (1/31536000) # 31536000 seconds per year
  return(W_gC)
}

## Scenario Values at 35˚C:
# Scenario 1: 5E-17 kJ/cell/yr
# 
# Scenario 2: 2E-16 kJ/cell/yr
# 
# Scenario 3: 9E-16 kJ/cell/yr
# 
# Scenario 4: 5E-15 kJ/cell/yr

lever_limits <- tibble(
  scenario = c(1,2,3,4),
  kJ_per_cell_yr = c(5E-17, 2E-16, 9E-16, 5E-15)
) |> 
  # add scenario values:
  # apply the conversion we describe above:
  mutate(
    MSP_W_gC = energy_turnover_to_MSP(
      kJ_per_cell_yr = kJ_per_cell_yr, cell_mass_gC = mean_cell_mass_gC
    )
  )
```

Read in Tori's data

```{r}
# Read in Tori's data and rename to match our column headers
litreview <- readxl::read_excel("data/Hoehler_Fig3data.xlsx") |> 
  rename(source = `...1`,
         MSP.J_s_g = `MSP (W/gC)`,
         mu_star.yr = `Biomass C Turnover, Observed (yr-1)`
         ) |> 
  filter(!is.na(source))
```

Read in Templeton & Caro 2023 AREPS SI data on biomass turnover in the rock hosted biosphere (RHB), convert generation time to turnover rate $\mu$ , then to mass-specific carbon turnover rate $\mu^*$ by multiplying by the average cell biomass of the study:

$$
\mu \: (day^{-1}) = ln(2)/T_G \\
\mu^* = \mu \: (day^{-1}) \times g C_{biomass} = gC_{biomass}/day \\
$$

### Read in Templeton & Caro 2023

```{r}
# Read in Templeton & Caro (AREPS 2023) SI Data
# on biomass turnover in the rock hosted biosphere (RHB)
rhb_turnover <- readxl::read_excel(
  "data/Templeton_and_Caro_AREPS_SI_data.xlsx"
) |> 
  mutate(
    # calculate turnover rate from generation time
    mu_star.day = log(2) / gen_time_d_mean,
    mu_star.yr = mu_star.day * 365, # convert from days-1 to yr-1
    mu_star.sec = mu_star.day / 86400, # 86400 seconds per day
    # Eq. 7:
    MSP.J_s_g = mu_star.sec / 0.00003
  ) |> 
  filter(Source != "LABEL")
```

### Read in Hoehler et al. 2023

Combine Hoehler et al. literature data with our literature data:

```{r}
hoehler_sediment_data <- readxl::read_excel("data/Sediment MSP.xlsx") |> 
  rename("MSP.J_s_g" = `MSP (W/gC)`,
         "depth_cm" = `Depth (cm)`) |> 
  select(-c(note, Citation)) |> 
  mutate(
    group = case_when(
      depth_cm >= 100 ~ "Marine Sediments (>= 1 m depth)",
      depth_cm < 100 ~ "Marine Sediments (< 1 m depth)"
    )
    )

litreview_combined <- litreview |> 
  # Add in templeton & Caro rock hosted biosphere data
  bind_rows(rhb_turnover |> 
              filter(Source != "LABEL") |> 
              rename(group = Source) |> 
              select(group, mu_star.yr, MSP.J_s_g)
              ) |> 
  # clean up names
  mutate(
    group = case_when(
      str_detect(group, "sediment") ~ "Marine Sediments (>= 1 m depth)",
      str_detect(group, "rock") ~ "Rock-hosted subsurface",
      str_detect(group, "soil") ~ "Soil",
      str_detect(group, "Marine PP") ~ "Marine Primary Production",
      str_detect(group, "culture") ~ "Culture",
      str_detect(group, "Soils") ~ "Soil",
      str_detect(group, "Terrestrial PP") ~ "Terrestrial Primary Production",
      TRUE ~ group
    )
  ) |> 
  # add in Hoehler sediment data
  bind_rows(hoehler_sediment_data) |> 
  group_by(group) |> 
  mutate(median_msp = median(MSP.J_s_g, na.rm = TRUE)) |> 
  ungroup() |> 
  mutate(group = fct_rev(fct_reorder(group, median_msp)))


```

Inspect sediment data

```{r}
hoehler_sediment_data |> 
  ggplot(
    aes(
      x = MSP.J_s_g,
      y = depth_cm
    )
  ) +
  geom_point() +
  scale_x_log10() +
  scale_y_reverse()

plotly::ggplotly()
```

Plot our data

```{r}
# plot the standard error
se <- function(vector) {
  standard_error = sd(vector, na.rm = TRUE) / sqrt(length(vector))
  return(standard_error)
}


assim_interval <- assim_metabolic |> 
  filter(MSP.J_s_g > 0, mu_star.sec > 0) |> 
  group_by(well, depth, amendment) |> 
  summarize(
    MSP.J_s_g_mn = mean(MSP.J_s_g, na.rm = TRUE),
    MSP.J_s_g_lower = mean(MSP.J_s_g_lower, na.rm = TRUE),
    MSP.J_s_g_upper = mean(MSP.J_s_g_upper, na.rm = TRUE),
    mu_star.yr_mn = mean(mu_star.yr, na.rm = TRUE),
    # calculate standard error for C turnover
    mu_star.yr_lower = mean(mu_star.yr, na.rm = TRUE) - se(mu_star.yr),
    mu_star.yr_upper = mean(mu_star.yr, na.rm = TRUE) + se(mu_star.yr)
  )

scenario1_MSP <- lever_limits |> filter(scenario == 1) |> select(MSP_W_gC) |> pull()
scenario2_MSP <- lever_limits |> filter(scenario == 2) |> select(MSP_W_gC) |> pull()
scenario3_MSP <- lever_limits |> filter(scenario == 3) |> select(MSP_W_gC) |> pull()
scenario4_MSP <- lever_limits |> filter(scenario == 4) |> select(MSP_W_gC) |> pull()

p_MSP_vs_mustar <- assim_interval |> 
  ggplot(
    aes(
    )
  ) +
  # plot MSP limits from Lever et al. (2015)
  annotate(geom = "rect", ymin = 1e-10, ymax = 1e10, xmin = 1e-10, alpha = 0.5,
           xmax = scenario4_MSP, color = "black", fill = "#ba0000") +
  annotate(geom = "rect", ymin = 1e-10, ymax = 1e10, xmin = 1e-10, alpha = 0.3,
           xmax = scenario3_MSP, color = "black", fill = "#ba0000") +
  annotate(geom = "rect", ymin = 1e-10, ymax = 1e10, xmin = 1e-10, alpha = 0.3,
           xmax = scenario2_MSP, color = "black", fill = "#ba0000") +
  annotate(geom = "rect", ymin = 1e-10, ymax = 1e10, xmin = 1e-10, alpha = 1,
           xmax = scenario1_MSP, color = "black", fill = "#ba0000") +
  # Plot lit review data:
  geom_point(data = litreview,
             aes(
               x = MSP.J_s_g, y = mu_star.yr,
               shape = group, color = group),
             size = 2) +
  # Plot this study
  geom_pointrange(
    aes(
      x = MSP.J_s_g_mn,
      xmin = MSP.J_s_g_lower,
      xmax = MSP.J_s_g_upper,
      y = mu_star.yr_mn,
      fill = well
    ),
    shape = 21, color = "black"
  ) +
  geom_pointrange(
    aes(
      x = MSP.J_s_g_mn,
      y = mu_star.yr_mn,
      ymin = mu_star.yr_lower,
      ymax = mu_star.yr_upper,
      fill = well
    ), shape = 21, color = "black"
  ) +
  # Scale axes and color
  scale_x_log10(
    #limits = c(1e-8, 1e2),
    labels = scales::trans_format("log10", scales::math_format(10^.x)),
    breaks = c(1e-8, 1e-6, 1e-4, 1e-2, 1e0, 1e2),
    sec.axis = dup_axis(name = "")
    ) +
  scale_y_log10(
    #limits = c(1e-6, 1e5),
    labels = scales::trans_format("log10", scales::math_format(10^.x)),
    breaks = c(1e-6, 1e-4, 1e-2, 1e0, 1e2, 1e4)
    ) +
  coord_cartesian(xlim = c(1e-8, 1e2), ylim = c(1e-6, 1e5)) +
  ggthemes::scale_color_colorblind() +
  scale_fill_manual(values = well_palette) +
  scale_shape_manual(values = c(15, 16, 17, 18, 19, 4)) +
  # Theme options:
  labs(
    x = "Mass-Specific Power (W /(g C))",
    y = latex2exp::TeX("Mass-Specific Carbon Turnover Rate $(yr^{-1})$"),
    fill = "Borehole",
    shape = "Literature Source",
    color = "Literature Source"
  ) +
  theme_bw() +
  theme(
    legend.background = element_rect(color = "black"),
    axis.text = element_text(color = "black"),
    panel.grid = element_blank(),
    legend.position = "right",
    legend.text = element_text(size = 7)
  )

p_MSP_vs_mustar

# cowplot::save_plot(
#   filename = "fig_output/MSP_mustar.pdf", plot = p_MSP_vs_mustar,
#   base_height = 5, base_width = 10
# )
```

# Plot as a density curve:

```{r}
# Panel B
p_MSP_density <- assim_metabolic |> 
  rename(group = well) |>
  mutate(group = factor(group, levels = c("BA4A", "BA1B", "BA3A"))) |> 
  filter(MSP.J_s_g > 0) |>
  ggplot(
    aes(
      x = MSP.J_s_g,
      fill = group,
      color = group,
      y = group
    )
  ) +
  scale_x_log10(
    breaks = c(1e-8, 1e-6, 1e-4, 1e-2, 1e0, 1e2),
    labels = scales::trans_format("log10", scales::math_format(10^.x))
    ) +
  annotate(geom = "rect", ymin = -Inf, ymax = Inf, xmin = 1e-10, alpha = 0.5,
           xmax = scenario4_MSP, color = "black", fill = "#ba0000") +
  annotate(geom = "rect", ymin = -Inf, ymax = Inf, xmin = 1e-10, alpha = 0.3,
           xmax = scenario3_MSP, color = "black", fill = "#ba0000") +
  annotate(geom = "rect", ymin = -Inf, ymax = Inf, xmin = 1e-10, alpha = 0.3,
           xmax = scenario2_MSP, color = "black", fill = "#ba0000") +
  annotate(geom = "rect", ymin = -Inf, ymax = Inf, xmin = 1e-10, alpha = 1,
           xmax = scenario1_MSP, color = "black", fill = "#ba0000") +
  ggridges::geom_density_ridges(color = "black", alpha = 0.5, scale = 0.9) +
  ggdist::stat_pointinterval(color = "black") +
  scale_fill_manual(values = c("#3471ab", "#dc2522", "#48a44b")) +
  coord_cartesian(xlim = c(1e-8, 1e2)) +
  annotation_logticks(side = "b") +
  theme_classic() +
  labs(
    x = "Mass-Specific Power (W /(g C))",
    y = ""
  ) +
  theme(
    axis.line.y = element_blank(),
    #axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.title.y = element_blank(),
    legend.position = "None",
    panel.grid.major.x = element_line(color = "lightgray", linewidth = 0.25),
    panel.grid.major.y = element_line(color = "black", linewidth = 0.25)
  )
p_MSP_density


# Panel A
p_litreview <- litreview_combined |> 
  ggplot(
    aes(
      x = MSP.J_s_g,
      y = group,
      fill = group,
      color = group
      )
    ) +
  scale_x_log10(
      sec.axis = dup_axis(),
      breaks = c(1e-8, 1e-6, 1e-4, 1e-2, 1e0, 1e2),
      labels = scales::trans_format("log10", scales::math_format(10^.x))
  ) +
  #geom_point(shape = 21, color = "black", size = 3) +
  ggdist::stat_pointinterval(color = "black") +
  scale_fill_brewer(palette = "Set3") +
  coord_cartesian(xlim = c(1e-8, 1e2), ylim = c(0, 9)) +
  annotation_logticks(side = "t") +
  theme_classic() +
  theme(
    legend.position = "None",
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.line.x.bottom = element_blank(),
    axis.text.x.bottom = element_blank(),
    axis.ticks.x.bottom = element_blank(),
    panel.grid.major.x = element_line(color = "lightgray", linewidth = 0.25)
  )
p_litreview

p_MSP_dens_combined <- cowplot::plot_grid(
  p_litreview, p_MSP_density, ncol = 1,
  rel_heights = c(0.25, 0.75), align = "hv", axis = "tblr"
  )
p_MSP_dens_combined

cowplot::save_plot(plot = p_MSP_dens_combined,
                   base_height = 9, base_width = 11,
                   filename = "fig_output/MSP_literature_density2.pdf"
                   )
```

# Export

MSP

```{r}


median_MSP <- assim_metabolic |> 
  group_by(well, depth) |> 
  summarize(
    all = median(MSP.J_s_g, na.rm = TRUE)
  )

median_MSP_C <- assim_metabolic |> 
  group_by(well, depth, amendment) |> 
  summarize(median_MSP_C = median(MSP.J_s_g, na.rm = TRUE)) |> 
  pivot_wider(names_from ="amendment", values_from = "median_MSP_C") |> 
  left_join(median_MSP, by = c("well", "depth")) |> 
  ungroup()

gt_MSP <- median_MSP_C |> 
  gt::gt(groupname_col = "well") |> 
  gt::cols_label(all = "median") |> 
  gt::fmt_scientific(columns = -depth) |> 
  gt::tab_spanner(columns = c(bicarbonate, acetate, formate, all), 
                  label = "MSP (W (g C){{^-1}}") |> 
  gt::cols_align("center") |> 
  gt::data_color(columns = all, palette = "viridis") |> 
  gt::summary_rows(
    columns = -depth,
    fn = list("median"),
    fmt = list(~ gt::fmt_scientific(., decimals = 2))
  )


gt_MSP

gt_MSP |> gt::gtsave("data_output/MSP.html")
median_MSP_C |> writexl::write_xlsx("data_output/MSP.xlsx")
```
