labs(
x = "Incubation time (days)",
y = latex2exp::TeX("nmol $CH_4$ $ml^{-1}$")
) +
theme(
strip.background = element_rect(fill = "#e3e3e3", color = NA),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank(),
strip.background.x = element_rect(fill = "black"),
strip.text = element_text(color = "white"),
panel.border = element_rect(linewidth = 1.2, color = "black"),
axis.ticks.x = element_blank(),
#legend.position = "None"
)
plotly::ggplotly()
View(gc_data)
amendment_palette <- c("#9c0000", "#004e9c", "#003b09")
gc_data_filtered |>
filter(gas == "CH4") |>
ggplot(
aes(x = dt,
y = peak_area,
color = amendment,
shape = amendment,
linetype = amendment,
label = file_name
)
) +
geom_point() +
geom_line() +
facet_wrap(vars(well, depth), scales = "free_y") +
scale_color_manual(values = amendment_palette) +
#scale_x_continuous(breaks = c(0, 30, 60, 120, 180)) +
theme_bw() +
labs(
x = "Incubation time (days)",
y = latex2exp::TeX("nmol $CH_4$ $ml^{-1}$")
) +
theme(
strip.background = element_rect(fill = "#e3e3e3", color = NA),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank(),
strip.background.x = element_rect(fill = "black"),
strip.text = element_text(color = "white"),
panel.border = element_rect(linewidth = 1.2, color = "black"),
axis.ticks.x = element_blank(),
#legend.position = "None"
)
#plotly::ggplotly()
amendment_palette <- c("#9c0000", "#004e9c", "#003b09")
gc_data_filtered |>
filter(gas == "CH4") |>
ggplot(
aes(x = dt,
y = nmol_per_ml,
color = amendment,
shape = amendment,
linetype = amendment,
label = file_name
)
) +
geom_point() +
geom_line() +
facet_wrap(vars(well, depth), scales = "free_y") +
scale_color_manual(values = amendment_palette) +
#scale_x_continuous(breaks = c(0, 30, 60, 120, 180)) +
theme_bw() +
labs(
x = "Incubation time (days)",
y = latex2exp::TeX("nmol $CH_4$ $ml^{-1}$")
) +
theme(
strip.background = element_rect(fill = "#e3e3e3", color = NA),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank(),
strip.background.x = element_rect(fill = "black"),
strip.text = element_text(color = "white"),
panel.border = element_rect(linewidth = 1.2, color = "black"),
axis.ticks.x = element_blank(),
#legend.position = "None"
)
#plotly::ggplotly()
gc_data_filtered |>
filter(gas == "CH4") |>
ggplot(
aes(x = dt,
y = peak_area,
color = amendment,
shape = amendment,
linetype = amendment,
label = file_name
)
) +
geom_point() +
geom_line() +
facet_wrap(vars(well, depth), scales = "free_y") +
scale_color_manual(values = amendment_palette) +
#scale_x_continuous(breaks = c(0, 30, 60, 120, 180)) +
theme_bw() +
theme(
strip.background = element_rect(fill = "#e3e3e3", color = NA),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank(),
strip.background.x = element_rect(fill = "black"),
strip.text = element_text(color = "white"),
panel.border = element_rect(linewidth = 1.2, color = "black"),
axis.ticks.x = element_blank(),
#legend.position = "None"
)
t0 <- tibble(
well = c("BA3A", "BA4A", "BA1B")
) |>
crossing(
depth = c(20, 150, 270),
amendment = c("Bicarbonate", "Formate", "Acetate"),
gas = c("CH4", "CO2")
) |>
mutate(
depth = case_when(
depth == 270 & well == "BA1B" ~ 250,
TRUE ~ depth
)
) |>
mutate(
nmol_per_ml = 0,
start_date = dmy("07FEB23"),
sampling_date = dmy("07FEB23"),
dt = sampling_date - start_date,
peak_area = 0
)
gc_data <- gc_data |>
bind_rows(t0)
excluded_list <- excluded$excluded
gc_data_filtered <- gc_data |>
filter(!file_name %in% excluded_list)
gc_data_filtered |>
filter(gas == "CH4") |>
ggplot(
aes(x = dt,
y = peak_area,
color = amendment,
shape = amendment,
linetype = amendment,
label = file_name
)
) +
geom_point() +
geom_line() +
facet_wrap(vars(well, depth), scales = "free_y") +
scale_color_manual(values = amendment_palette) +
#scale_x_continuous(breaks = c(0, 30, 60, 120, 180)) +
theme_bw() +
theme(
strip.background = element_rect(fill = "#e3e3e3", color = NA),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank(),
strip.background.x = element_rect(fill = "black"),
strip.text = element_text(color = "white"),
panel.border = element_rect(linewidth = 1.2, color = "black"),
axis.ticks.x = element_blank(),
#legend.position = "None"
)
gc_data_filtered |>
filter(gas == "CH4") |>
ggplot(
aes(x = dt,
y = peak_area,
color = amendment,
shape = amendment,
linetype = amendment,
label = file_name
)
) +
geom_point() +
geom_line() +
facet_wrap(vars(well, depth)) +
scale_color_manual(values = amendment_palette) +
#scale_x_continuous(breaks = c(0, 30, 60, 120, 180)) +
theme_bw() +
theme(
strip.background = element_rect(fill = "#e3e3e3", color = NA),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank(),
strip.background.x = element_rect(fill = "black"),
strip.text = element_text(color = "white"),
panel.border = element_rect(linewidth = 1.2, color = "black"),
axis.ticks.x = element_blank(),
#legend.position = "None"
)
library(readr)
library(readr)
iso_read_CRDS <- function(path) {
crds_df <- read_delim(path, sep = "", header = TRUE)
return(crds_df)
}
iso_read_CRDS("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
iso_read_CRDS("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
?read_delim
iso_read_CRDS <- function(path) {
crds_df <- read_delim(path, delim = "")
return(crds_df)
}
iso_read_CRDS("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
iso_read_CRDS <- function(path) {
crds_df <- read_delim(path)
return(crds_df)
}
iso_read_CRDS("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
test <- iso_read_CRDS("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
View(test)
read.picarro <- function (file_path) {
picarro_in <- read.delim(file_path , sep = "",header = T)
options(digits.secs = 3)
picarro_in$DATE <- format(picarro_in$DATE, format = "%m/%d/%Y" , origin = "GMT")
picarro_in$TIME <- format(picarro_in$TIME, format = "%H:%M:%S")
original.timestamp=format(as.POSIXct(paste(picarro_in$DATE, picarro_in$TIME)), "%Y/%m/%d %H:%M:%OS")
picarro.time = parse_date_time(original.timestamp, "%Y/%m/%d %H:%M:%OS" )
picarro_to_pullman = with_tz(picarro.time,tzone = Sys.timezone())
picarro_in$LocalTime = picarro_to_pullman
return(picarro_in)
}
test2 <- read.picarro("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
library(lubridate)
test2 <- read.picarro("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
View(test2)
?options
iso_read_CRDS <- function(path) {
crds_df <- read.delim(file_path , sep = "", header = T)
return(crds_df)
}
test <- iso_read_CRDS("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
iso_read_CRDS <- function(path) {
crds_df <- read.delim(path , sep = "", header = T)
return(crds_df)
}
test <- iso_read_CRDS("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
View(test)
test
head(test)
test %>% summarise_all(class)
test |>  summarise_all(class)
library(tidyverse)
library(lubridate)
test|> summarise_all(class)
iso_read_CRDS <- function(path) {
crds_df <- read.delim(path , sep = "", header = T) |>
DATE = ymd(DATE) # convert column to date type
TIME = hms(TIME) # convert column to time type
return(crds_df)
}
iso_read_CRDS <- function(path) {
crds_df <- read.delim(path , sep = "", header = T) |>
DATE = ymd(DATE) # convert column to date type
TIME = hms(TIME) # convert column to time type
return(crds_df)
}
iso_read_CRDS <- function(path) {
crds_df <- read.delim(path , sep = "", header = T) |>
crds_df <- crds_df |>
DATE = ymd(DATE) # convert column to date type
TIME = hms(TIME) # convert column to time type
return(crds_df)
}
iso_read_CRDS <- function(path) {
crds_df <- read.delim(path , sep = "", header = T) |>
crds_df <- crds_df |>
mutate(
DATE = ymd(DATE) # convert column to date type
TIME = hms(TIME) # convert column to time type
iso_read_CRDS <- function(path) {
crds_df <- read.delim(path , sep = "", header = T) |>
crds_df <- crds_df |>
mutate(
DATE = ymd(DATE), # convert column to date type
TIME = hms(TIME) # convert column to time type
)
return(crds_df)
}
iso_read_CRDS <- function(path) {
crds_df <- read.delim(path , sep = "", header = T) |>
mutate(
DATE = ymd(DATE), # convert column to date type
TIME = hms(TIME) # convert column to time type
)
return(crds_df)
}
test <- iso_read_CRDS("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
View(test)
View(test2)
test
head(test)
iso_read_CRDS <- function(path) {
crds_df <- read.delim(path , sep = "", header = T) |>
mutate(
DATE = ymd(DATE) # convert column to date type
#TIME = hms(TIME) # convert column to time type
)
return(crds_df)
}
test <- iso_read_CRDS("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
iso_read_CRDS <- function(path) {
crds_df <- read.delim(path , sep = "", header = T) |>
mutate(
DATE = ymd(DATE), # convert column to date type
TIME = hms(TIME) # convert column to time type
)
return(crds_df)
}
test <- iso_read_CRDS("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
?hms
iso_read_CRDS <- function(path) {
crds_df <- read.delim(path , sep = "", header = T) |>
mutate(
DATE = ymd(DATE), # convert column to date type
TIME = hms(TIME), # convert column to time type
datetime = ymd_hms(DATE, TIME)
)
return(crds_df)
}
test <- iso_read_CRDS("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
iso_read_CRDS <- function(path) {
crds_df <- read.delim(path , sep = "", header = T) |>
mutate(
DATE = ymd(DATE), # convert column to date type
TIME = hms(TIME), # convert column to time type
datetime = DATE + TIME
)
return(crds_df)
}
test <- iso_read_CRDS("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
test$datetime
test <- iso_read_CRDS("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
iso_read_CRDS <- function(path) {
crds_df <- read.delim(path , sep = "", header = T) |>
mutate(
DATE = ymd(DATE), # convert column to date type
TIME = hms(TIME), # convert column to time type
datetime = DATE + TIME
)
return(crds_df)
}
test <- iso_read_CRDS("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
crds_df <- read.delim(path , sep = "", header = T) |>
mutate(
DATE = ymd(DATE), # convert column to date type
TIME = hms(TIME), # convert column to time type
datetime = DATE + TIME
) |>
select(datetime, everything())
iso_read_CRDS <- function(path) {
crds_df <- read.delim(path , sep = "", header = T) |>
mutate(
DATE = ymd(DATE), # convert column to date type
TIME = hms(TIME), # convert column to time type
datetime = DATE + TIME
) |>
select(datetime, everything())
return(crds_df)
}
test <- iso_read_CRDS("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
iso_read_CRDS <- function(path) {
crds_df <- read.delim(path , sep = "", header = T) |>
mutate(
DATE = ymd(DATE), # convert column to date type
TIME = hms(TIME), # convert column to time type
datetime = DATE + TIME
) |>
select(datetime, everything())
return(crds_df)
}
require(tidyverse)
require(lubridate)
test |> ggplot(
aes(
x = datetime,
y = test$HR_Delta_iCH4_Raw
)
)
test |> ggplot(
aes(
x = datetime,
y = HR_Delta_iCH4_Raw
)
)
test |> ggplot(
aes(
x = datetime,
y = Delta_iCH4_Raw
)
)
test |> ggplot(
aes(
x = datetime,
y = Delta_iCH4_Raw
)
) +
geom_line()
test |> ggplot(
aes(
x = datetime,
y = X12CO2_dry
)
) +
geom_line()
library(ggstackplot)
test |> ggstackplot(
x = datetime,
y = c(X13CO2, X12CO2, Delta_Raw_iCO2, Delta_iCH4_Raw)
)
test |> ggstackplot(
x = datetime,
y = c(X13CO2, X12CO2, Delta_Raw_iCO2, Delta_iCH4_Raw),
template =
ggplot() +
geom_line() +
theme_stackplot() +
scale_x_datetime()
)
test |> ggstackplot(
x = datetime,
y = c(X13CO2, X12CO2, Delta_Raw_iCO2, Delta_iCH4_Raw),
alternate_axes = FALSE,
template =
ggplot() +
geom_line() +
theme_stackplot() +
scale_x_datetime()
)
require(tidyverse)
require(lubridate)
iso_read_CRDS <- function(path) {
crds_df <- read.delim(path , sep = "", header = T) |>
mutate(
DATE = ymd(DATE), # convert column to date type
TIME = hms(TIME), # convert column to time type
datetime = DATE + TIME
) |>
select(datetime, everything())
return(crds_df)
}
test <- iso_read_CRDS("data/picarro/CFIDS2308-20230803-000921Z-DataLog_User.dat")
test |> ggstackplot(
x = datetime,
y = c(X13CO2, X12CO2, Delta_Raw_iCO2, Delta_iCH4_Raw),
alternate_axes = FALSE,
template =
ggplot() +
geom_line() +
theme_stackplot() +
scale_x_datetime()
)
map <- readxl::read_excel(path = "data/picarro/sample_map.xlsx")
View(map)
library(dplyr)
# Sample data for dataframe A
A <- data.frame(
datetime = ymd_hms(c("2023-08-11 12:30:00", "2023-08-11 15:00:00", "2023-08-11 18:45:00"))
)
View(A)
# Sample data for dataframe B
B <- data.frame(
id = c(1, 2, 3),
datetime_start = ymd_hms(c("2023-08-11 12:00:00", "2023-08-11 14:00:00", "2023-08-11 18:00:00")),
datetime_end = ymd_hms(c("2023-08-11 14:00:00", "2023-08-11 16:00:00", "2023-08-11 19:00:00"))
)
View(B)
# Join dataframes and mutate a new column based on datetime comparison
result <- A %>%
left_join(B, by = character(0)) %>%  # Join without common columns to create a cartesian product
mutate(is_within_interval = between(datetime, datetime_start, datetime_end))
View(result)
print(result)
View(A)
View(B)
View(result)
library(dplyr)
# Sample data for dataframe A
A <- data.frame(
datetime = ymd_hms(c("2023-08-11 12:30:00", "2023-08-11 15:00:00", "2023-08-11 18:45:00"))
)
# Sample data for dataframe B
B <- data.frame(
id = c(1, 2, 3),
datetime_start = ymd_hms(c("2023-08-11 12:00:00", "2023-08-11 14:00:00", "2023-08-11 18:00:00")),
datetime_end = ymd_hms(c("2023-08-11 14:00:00", "2023-08-11 16:00:00", "2023-08-11 19:00:00"))
)
# Perform a left join and create a new dataframe with the desired structure
result <- A %>%
mutate(id = NA_integer_) %>%  # Initialize the id column with NAs
left_join(B, by = character(0)) %>%  # Left join without common columns
mutate(id = if_else(between(datetime, datetime_start, datetime_end), id, NA_integer_)) %>%  # Update id based on datetime comparison
print(result)
# Perform a left join and create a new dataframe with the desired structure
result <- A %>%
mutate(id = NA_integer_) %>%  # Initialize the id column with NAs
left_join(B, by = character(0)) %>%  # Left join without common columns
mutate(id = if_else(between(datetime, datetime_start, datetime_end), id, NA_integer_))  # Update id based on datetime comparison
# Perform a left join and create a new dataframe with the desired structure
result <- A %>%
mutate(id = NA_integer_) %>%  # Initialize the id column with NAs
left_join(B, by = character(0))
View(result)
View(result)
# Perform a left join and create a new dataframe with the desired structure
result <- A %>%
mutate(id = NA_integer_) %>%  # Initialize the id column with NAs
left_join(B, by = character(0)) |>
mutate(id = if_else(
datetime >= datetime_start && datetime <= datetime_end,
true = id.y,
false = NA_integer_
))
