# Calculate mass per mL of gas
ug_per_ml = case_when(
gas == "CO2" ~ (mol_per_ml * MW.CO2) * 1e-6,
gas == "CH4" ~ (mol_per_ml * MW.CH4) * 1e-6
)
)
View(gc_samples_processed)
standards |>
ggplot() +
aes(
x = sample_volume,
y = peak_area,
color = gas,
) +
geom_smooth(
method = "lm",
formula = "y~x",
color = "blue",
linewidth = 0.5
) +
geom_point(
alpha = 0.5
) +
coord_cartesian(
xlim = c(0.1, 1),
ylim = c(0, 1600)
) +
ggpmisc::stat_poly_eq(use_label(c("eq", "R2"))) + # prints the equation and r2 of stat_poly_
scale_x_continuous(breaks = c(0.25, 0.5, 0.75)) +
labs(
x = "Injection volume (mL)",
y = "Peak Area",
color = "Gas",
title = "1% Gas Mix Standard Curve"
) +
theme_classic()
library(ggpmisc)
standards |>
ggplot() +
aes(
x = sample_volume,
y = peak_area,
color = gas,
) +
geom_smooth(
method = "lm",
formula = "y~x",
color = "blue",
linewidth = 0.5
) +
geom_point(
alpha = 0.5
) +
coord_cartesian(
xlim = c(0.1, 1),
ylim = c(0, 1600)
) +
ggpmisc::stat_poly_eq(use_label(c("eq", "R2"))) + # prints the equation and r2 of stat_poly_
scale_x_continuous(breaks = c(0.25, 0.5, 0.75)) +
labs(
x = "Injection volume (mL)",
y = "Peak Area",
color = "Gas",
title = "1% Gas Mix Standard Curve"
) +
theme_classic()
CO2_curve_equation <- paste("y =", round(CO2_curve_slope, 2), "x", "+", round(CO2_curve_int, 2))
CH4_curve_equation <- paste("y =", round(CH4_curve_slope, 2), "x", "+", round(CH4_curve_int, 2))
View(CH4_curve_fit)
View(CO2_curve_fit)
standards |>
ggplot() +
aes(
x = sample_volume,
y = peak_area,
color = gas,
) +
geom_smooth(
method = "lm",
formula = "y~x",
color = "blue",
linewidth = 0.5
) +
geom_point(
alpha = 0.5
) +
coord_cartesian(
xlim = c(0.1, 1),
ylim = c(0, 1600)
) +
scale_x_continuous(breaks = c(0.25, 0.5, 0.75)) +
labs(
x = "Injection volume (mL)",
y = "Peak Area",
color = "Gas",
title = "1% Gas Mix Standard Curve"
) +
theme_classic()
View(gc_standard_curve)
gc_standard_curve |>
ggplot(aes(
x = nmol_specific,
y = peak_area
)) +
geom_point() +
geom_smooth()
gc_standard_curve |>
ggplot(aes(
x = nmol_specific,
y = peak_area
)) +
geom_point() +
ggpmisc::stat_poly_eq(use_label(c("eq", "R2"))) + # prints the equation and r2 of stat_poly_
```
gc_standard_curve |>
ggplot(aes(
x = nmol_specific,
y = peak_area
)) +
geom_point() +
ggpmisc::stat_poly_eq(ggpmisc::use_label(c("eq", "R2"))) + # prints the equation and r2 of stat_poly_
```
gc_standard_curve |>
ggplot(aes(
x = nmol_specific,
y = peak_area
)) +
geom_point() +
ggpmisc::stat_poly_eq(ggpmisc::use_label(c("eq", "R2")))
gc_standard_curve |>
ggplot(aes(
x = nmol_specific,
y = peak_area,
color = gas
)) +
geom_point() +
ggpmisc::stat_poly_eq(ggpmisc::use_label(c("eq", "R2")))
gc_standard_curve |>
ggplot(aes(
x = nmol_specific,
y = peak_area,
color = gas
)) +
geom_point() +
ggpmisc::stat_poly_eq(ggpmisc::use_label(c("eq", "R2"))) +
ggpmisc::stat_poly_line()
gc_standard_curve |>
ggplot(aes(
x = nmol_specific,
y = peak_area,
color = gas
)) +
geom_point() +
ggpmisc::stat_poly_eq(ggpmisc::use_label(c("eq", "R2"))) +
ggpmisc::stat_poly_line(se = FALSE)
gc_standard_curve |>
ggplot(aes(
x = nmol_specific,
y = peak_area,
color = gas
)) +
geom_point() +
ggpmisc::stat_poly_eq(ggpmisc::use_label(c("eq", "R2"))) +
ggpmisc::stat_poly_line(se = FALSE) +
theme_bw() +
labs(
x = "nmol (Specific Gas)",
y = "Peak Area"
)
View(gc_samples_processed)
saveRDS(object = gc_samples_processed, file = "cache/gc_samples1.RDS")
samples |>
arrange(depth) |>
filter(gas == "CH4") |>
ggplot(
aes(
x = depth,
y = peak_area,
color = amendment
)
) +
geom_point() +
geom_path(
alpha = 0.25
) +
facet_wrap(vars(well, gas), scales = "free_x") +
coord_flip() +
scale_x_reverse() +
ggsci::scale_color_aaas() +
labs(
y = "Peak Area",
x = "Depth (m)",
color = "Carbon Amendment"
) +
theme_bw() +
theme(
legend.position = "bottom"
)
library(tidyverse) # Easily Install and Load the 'Tidyverse', CRAN v1.3.2
library(plotly) # Create Interactive Web Graphics via 'plotly.js', CRAN v4.10.1
library(reticulate) # Interface to 'Python', CRAN v1.28
# Load GC raw data
gc <- read_csv("data/GC_Data_Table.csv") |>
rename(gc_sample_id = sample_type) |>
# fix mislabeled gas name
mutate(
gas = case_when(
gas == "C02" ~ "CO2",
TRUE ~ gas
)
) |>
# parse sample volume
mutate(
sample_volume = as.numeric(str_extract(gc_sample_id, "\\d+(\\.\\d+)?(?=ml)"))
)
standards <- gc |>
filter(
str_detect(gc_sample_id, "mix")
)
# and add metadata to sample tibble
samples <- gc |>
filter(
str_detect(gc_sample_id, "BA")
) |>
mutate(
well = case_when(
str_detect(gc_sample_id, "BA4A") ~ "BA4A",
str_detect(gc_sample_id, "BA3A") ~ "BA3A",
str_detect(gc_sample_id, "BA1B") ~ "BA1B"
),
depth = case_when(
str_detect(gc_sample_id, "20") ~ 20,
str_detect(gc_sample_id, "150") ~ 150,
str_detect(gc_sample_id, "250") ~ 250,
str_detect(gc_sample_id, "270") ~ 270
),
amendment = case_when(
str_detect(gc_sample_id, "AC") ~ "Acetate",
str_detect(gc_sample_id, "Form") ~ "Formate",
str_detect(gc_sample_id, "Bic") ~ "Bicarbonate"
)
)
standards |>
ggplot() +
aes(
x = sample_volume,
y = peak_area,
color = gas,
) +
geom_smooth(
method = "lm",
formula = "y~x",
color = "blue",
linewidth = 0.5
) +
geom_point(
alpha = 0.5
) +
coord_cartesian(
xlim = c(0.1, 1),
ylim = c(0, 1600)
) +
scale_x_continuous(breaks = c(0.25, 0.5, 0.75)) +
labs(
x = "Injection volume (mL)",
y = "Peak Area",
color = "Gas",
title = "1% Gas Mix Standard Curve"
) +
theme_classic()
samples |>
arrange(depth) |>
filter(gas == "CH4") |>
ggplot(
aes(
x = depth,
y = peak_area,
color = amendment
)
) +
geom_point() +
geom_path(
alpha = 0.25
) +
facet_wrap(vars(well, gas), scales = "free_x") +
coord_flip() +
scale_x_reverse() +
ggsci::scale_color_aaas() +
labs(
y = "Peak Area",
x = "Depth (m)",
color = "Carbon Amendment"
) +
theme_bw() +
theme(
legend.position = "bottom"
)
volume_to_moles <- function(pressure_atm = 0.8, vol_mL, R = 0.082057338	, temp_C = 20) {
# n = PV/RT
# R = 0.082057338	L.atm.K-1.mol-1
# average atmospheric pressure in boulder is about 0.8 atm
temp_K = temp_C + 273 # convert ˚C to ˚K
vol_L = vol_mL / 1000 # convert mL to L
n_moles = (pressure_atm * vol_L) / (R * temp_K)
return(n_moles)
}
volume_to_moles(pressure_atm = 0.8, vol_mL = 0.5, temp_C = 20) # 1.6637e-05
gc_standard_curve <- standards |>
ungroup() |>
relocate(gas, peak_area, sample_volume) |>
select(-c(retention_time, correction_factor, peak_height, gc_sample_id, column, carrier)) |>
mutate(
mol_total = volume_to_moles(vol_mL = sample_volume), # moles of gas injected
nmol_total = mol_total / 1E-9, # nmol gas injected (total),
nmol_specific = nmol_total * .01, # 1% of the gas either CO2 or CH4
)
# Tidy the fits
CH4_curve_fit <- lm(data = filter(gc_standard_curve, gas == "CH4"), peak_area ~ nmol_specific) |> broom::tidy() |>
mutate(gas = "CH4") |>
select(-c(std.error, statistic, p.value)) |>
pivot_wider(names_from = term, values_from = estimate)
CH4_curve_slope <- CH4_curve_fit |> pull(nmol_specific)
CH4_curve_int <- CH4_curve_fit |> pull(`(Intercept)`)
CH4_curve_equation <- paste("y =", round(CH4_curve_slope, 2), "x", "+", round(CH4_curve_int, 2))
`CO2_curve_fit <- lm(data = filter(gc_standard_curve, gas == "CO2"), peak_area ~ nmol_specific) |>
broom::tidy() |>
mutate(gas = "CO2") |>
select(-c(std.error, statistic, p.value)) |>
pivot_wider(names_from = term, values_from = estimate)
CO2_curve_slope <- CO2_curve_fit |> pull(nmol_specific)
CO2_curve_int <- CO2_curve_fit |> pull(`(Intercept)`)
CO2_curve_equation <- paste("y =", round(CO2_curve_slope, 2), "x", "+", round(CO2_curve_int, 2))
CH4_curve_equation
CO2_curve_equation
`CO2_curve_fit <- lm(data = filter(gc_standard_curve, gas == "CO2"), peak_area ~ nmol_specific) |>
broom::tidy() |>
mutate(gas = "CO2") |>
select(-c(std.error, statistic, p.value)) |>
pivot_wider(names_from = term, values_from = estimate)
CO2_curve_slope <- CO2_curve_fit |> pull(nmol_specific)
CO2_curve_int <- CO2_curve_fit |> pull(`(Intercept)`)
CO2_curve_equation <- paste("y =", round(CO2_curve_slope, 2), "x", "+", round(CO2_curve_int, 2))
CH4_curve_equation
CO2_curve_equation
CO2_curve_fit <- lm(data = filter(gc_standard_curve, gas == "CO2"), peak_area ~ nmol_specific) |>
broom::tidy() |>
mutate(gas = "CO2") |>
select(-c(std.error, statistic, p.value)) |>
pivot_wider(names_from = term, values_from = estimate)
CO2_curve_fit <- lm(data = filter(gc_standard_curve, gas == "CO2"), peak_area ~ nmol_specific) |>
broom::tidy() |>
mutate(gas = "CO2") |>
select(-c(std.error, statistic, p.value)) |>
pivot_wider(names_from = term, values_from = estimate)
CO2_curve_slope <- CO2_curve_fit |> pull(nmol_specific)
CO2_curve_int <- CO2_curve_fit |> pull(`(Intercept)`)
CO2_curve_equation <- paste("y =", round(CO2_curve_slope, 2), "x", "+", round(CO2_curve_int, 2))
CH4_curve_equation
CO2_curve_equation
peak_area_to_moles_per_mL <- function(peak_area, vol_mL, slope, intercept) {
n_nmol = (peak_area - intercept) / slope # n = (A-b) / x
mol = n_nmol / 1E9 # convert nanomoles to moles
mol_per_mL = mol / vol_mL # convert to moles per mL gas
return(
case_when(
mol_per_mL > 0 ~ mol_per_mL,
mol_per_mL <= 0 ~ 0
)
)
}
peak_area_to_pressure <- function(peak_area, R = 0.082057338, temp_C = 20, vol_mL, slope, intercept) {
# R = 0.082057338	L.atm.K-1.mol-1
temp_K = 273 + temp_C # convert to ˚K
vol_L = vol_mL / 1000 # convert to L
n_nmol = (peak_area - intercept) / slope # n = (A-b) / x
n_mol = n_nmol / 1E9 # convert nanomoles to moles
pressure_atm = (n_mol * R * temp_K)/vol_L # P = nRT/V
return(pressure_atm)
}
# Test it:
peak_area_to_pressure(25000, vol_mL = 0.5, slope = CO2_curve_slope, intercept = CO2_curve_int)
gc_standard_curve |>
ggplot(aes(
x = nmol_specific,
y = peak_area,
color = gas
)) +
geom_point() +
ggpmisc::stat_poly_eq(ggpmisc::use_label(c("eq", "R2"))) +
ggpmisc::stat_poly_line(se = FALSE) +
theme_bw() +
labs(
x = "nmol (Specific Gas)",
y = "Peak Area"
)
# define molecular weights of CO2 and methane
MW.CO2 <- 44.01 #g/mol
MW.CH4 <- 16.04 #g/mol
gc_samples_processed <- samples |>
filter(gas != "CO") |>
mutate(
# add the standard curve parameters
fit_slope = case_when(
gas == "CO2" ~ CO2_curve_slope,
gas == "CH4" ~ CH4_curve_slope
),
fit_int = case_when(
gas == "CO2" ~ CO2_curve_int,
gas == "CH4" ~ CH4_curve_int
),
# Calculate moles per mL of gas
mol_per_ml = peak_area_to_moles_per_mL(
peak_area = peak_area,
vol_mL = sample_volume,
slope = fit_slope,
intercept = fit_int
),
nmol_per_ml = mol_per_ml * 1E9,
partial_P_atm = peak_area_to_pressure(
peak_area = peak_area,
vol_mL = sample_volume,
slope = fit_slope,
intercept = fit_int
),
# Calculate mass per mL of gas
ug_per_ml = case_when(
gas == "CO2" ~ (mol_per_ml * MW.CO2) * 1e-6,
gas == "CH4" ~ (mol_per_ml * MW.CH4) * 1e-6
)
)
View(gc_samples_processed)
saveRDS(object = gc_samples_processed, file = "cache/gc_samples0.RDS")
library(tidyverse)
gc_data1 <- readRDS("cache/gc_samples1.RDS")
gc_data0 <- readRDS("cache/gc_samples0.RDS")
gc_data <- bind_rows(gc_data0, gc_data1)
View(gc_data)
library(lubridate)
difftime("2023-02-07","2023-03-13")
ddays("2023-02-07","2023-03-13")
ymd("2023-02-07")
difftime("2023-03-12", "2023-02-07")
difftime("2023-06-01", "2023-02-07")
gc_data <- bind_rows(gc_data0, gc_data1) |>
mutate(dt = case_when(
is.na(sample_set) ~ 33,
sample_set == "A" ~ 60,
sample_set == "B" ~ 114
))
gc_data |> pull(dt) |> unique()
gc_data |>
filter(gas == "CH4") |>
ggplot(
aes(x = dt,
y = nmol_per_ml,
color = well,
shape = depth)
) +
geom_point()
gc_data |>
filter(gas == "CH4") |>
ggplot(
aes(x = dt,
y = nmol_per_ml,
color = depth,
shape = well)
) +
geom_point()
gc_data |>
filter(gas == "CH4") |>
ggplot(
aes(x = dt,
y = nmol_per_ml,
color = depth,
shape = well)
) +
geom_point() +
facet_wrap(vars(amendment))
gc_data |>
filter(gas == "CH4") |>
ggplot(
aes(x = dt,
y = nmol_per_ml,
color = as.factor(depth),
shape = well)
) +
geom_point() +
facet_wrap(vars(amendment))
gc_data |>
filter(gas == "CH4") |>
ggplot(
aes(x = dt,
y = nmol_per_ml,
color = as.factor(depth),
shape = well)
) +
geom_point() +
geom_line() +
facet_wrap(vars(amendment))
gc_data |>
filter(gas == "CH4") |>
ggplot(
aes(x = dt,
y = nmol_per_ml,
color = as.factor(depth),
shape = well,
linetype = well
)
) +
geom_point() +
geom_line() +
facet_wrap(vars(amendment))
