---
title: "Cline Processing 2"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

This is a script for the processing of Cline samples from the "B" sample-set.

## Setup

```{r}
# Clear the environment
rm(list=ls())
```

### Load Libraries

```{r}
library(tidyverse)
library(plater)
library(ggpmisc)
```

### Load plates with plater package

```{r}
plate_list <- list.files(path = "data/cline_assays/2023-06-05-Clines/csvs")
plate_list <- plate_list[!grepl("map", plate_list)]

plate_list2 <- str_c("data/cline_assays/2023-06-05-Clines/csvs/", plate_list)

plate_names <- plate_list |> str_remove(".csv") |> str_to_lower()

data <- read_plates(
  files = plate_list2,
  plate_names = plate_names,
  well_ids_column = "Wells"
) |> 
  rename(plate_id = Plate) |> 
  mutate(Plate = case_when(
    str_detect(plate_id, "platea") ~ "platea",
    str_detect(plate_id, "plateb") ~ "plateb",
    str_detect(plate_id, "platec") ~ "platec"
  ))
```

### Load Plate Maps

```{r}
map_list <- list.files(path = "data/cline_assays/2023-06-05-Clines/csvs")
map_list <- map_list[grepl("map", map_list)]
map_list <- str_c("data/cline_assays/2023-06-05-Clines/csvs/", map_list)

maps <- read_plates(files = map_list) |> 
  mutate(
    Plate = str_remove(Plate, pattern = "map") |> str_to_lower(),
    sample_id = case_when(
      !is.na(`PLATE A`) ~ `PLATE A`,
      !is.na(`PLATE B`) ~ `PLATE B`,
      !is.na(`PLATE C`) ~ `PLATE C`
    )
  ) |> 
  select(c(Plate, Wells, sample_id))
```

### Load standards data

```{r}
standard_concs <- readxl::read_excel("data/cline_assays/2023-05-29-Clines/standards_concentration.xlsx")
```

### Load list of diluted samples

```{r}
diluted_samples <- readxl::read_excel("data/cline_assays/2023-06-05-Clines/diluted_samples.xlsx") |> pull()
```

### Combine Plate Data and Maps

```{r}
cline_data <- data |> 
  left_join(maps,
            by = c("Plate", "Wells")) |> 
  # add standard info
  mutate(
    is.standard = if_else(
      str_detect(sample_id, "STD"),
      TRUE,
      FALSE
    ),
    is.blank = if_else(
      str_detect(sample_id, "BLANK"),
      TRUE,
      FALSE
    ),
    is.empty = if_else(
      str_detect(sample_id, "EMPTY"),
      TRUE,
      FALSE
    )
  )
```

### Calculate average blank signal

```{r}
mean_blank <- cline_data |> 
  filter(is.blank) |> 
  pull(values) |> 
  mean()

paste("The average blank absorbance value at 670 nm is", mean_blank)
```

# Create standard curve

```{r}
 standard_data <- cline_data |> 
  filter(is.standard) |> 
  left_join(standard_concs, by = "sample_id") |> 
  select(-c(is.standard, is.blank, is.empty)) |> 
  mutate(abs.corrected = values - mean_blank)

p_std_curve <- standard_data |> 
  filter(concentration.um < 150) |> 
  ggplot(
    aes(y = concentration.um,
        x = abs.corrected
        )
  ) +
  ggpmisc::stat_poly_line(method = "lm") +
  geom_point(aes(color = sample_id),
             alpha = 0.7) +
  ggpmisc::stat_poly_eq(use_label(c("eq", "R2"))) +
  labs(
    y = "Concentration (µM)",
    x = "Absorbance (670nm)"
  ) +
  theme_bw()
p_std_curve

plotly::ggplotly()


# get equation
std_curve <- lm(data =standard_data |> filter(concentration.um < 150),
   concentration.um ~ abs.corrected
   ) |> broom::tidy()
std_int <- std_curve |> filter(term == "(Intercept)") |> pull(estimate)
std_slope <- std_curve |> filter(term == "abs.corrected") |> pull(estimate)

# Define a function that converts absorbance 670 to concentration of free sulfide
convert_670_to_conc <- function(abs, slope, int) {
  return((abs * std_slope) + std_int)
}

```

# Calculate cline data concs

### Calculate concentration of all samples

```{r}
cline_data_corrected <- cline_data |> 
  # filter out non-samples
  filter(!is.standard, !is.blank, !is.empty) |> 
  # average 3 replicates
  group_by(sample_id) |> 
  summarize(abs.mean = mean(values),
            abs.sd = sd(values)) |> 
  ungroup() |> 
  # add dilution factor
  mutate(
    DF = case_when(
      str_detect(sample_id, "DIL1") ~ 10,
      TRUE ~ 1
    )
  ) |> 
  # correct the absorbance values by subtracting blanks and multiplying by DF
  mutate(
    abs.corrected = if_else(
      abs.mean - mean_blank >= 0,
      true = (abs.mean - mean_blank) * DF,
      false = 0
      )
    ) |> 
  # calculate um from standard curve equation
  mutate(
    conc.um = convert_670_to_conc(
      abs = abs.corrected, 
      slope = std_slope, 
      int = std_int
      ),
    sd.conc.um = convert_670_to_conc(
      abs = abs.sd, 
      slope = std_slope, 
      int = std_int
  )) |> 
  # correct for dilution of adding to ZnAc solution
  # 400 µL diluted to 1400µL is a DF of 3.5
  mutate(
    conc.um = conc.um * 3.5
  ) |> 
  # Add metadata
  mutate(
    well = case_when(
      str_detect(sample_id, "BA1B") ~ "BA1B",
      str_detect(sample_id, "BA3A") ~ "BA3A",
      str_detect(sample_id, "BA4A") ~ "BA4A",
      TRUE ~ NA
    ),
    depth = case_when(
      str_detect(sample_id, "20") ~ 20,
      str_detect(sample_id, "150") ~ 150,
      str_detect(sample_id, "250") ~ 250,
      str_detect(sample_id, "270") ~ 270,
    ),
    amendment = case_when(
      str_detect(sample_id, "BIC") ~ "Bicarbonate",
      str_detect(sample_id, "AC") ~ "Acetate",
      str_detect(sample_id, "F") ~ "Formate",
      str_detect(sample_id, "CTL") ~ "Control",
    )
  ) |> 
  # remove diluted samples:
  # none of our samples are outside the dynamic range of the instrument!
  #filter(!str_detect(sample_id, "DIL")) |> 
  mutate(label = if_else(
    conc.um > 3,
    true = as.character(round(conc.um, 1)),
    false = "ND"
    )) |> 
  filter(!sample_id %in% diluted_samples) |> 
  # add timepoint information
  mutate(
    sample_set = "B"
  )
  
```

# Plot concentration of sulfide

```{r}
custom_order <- c("Acetate", "Bicarbonate", "Formate", "Control")

cline_data_corrected |> 
  mutate(amendment = fct_relevel(amendment, custom_order)) |>
  ggplot() +
  aes(
    x = amendment,
    y = conc.um,
    label = label
  ) +
  geom_col(fill = "black", width = 0.5) +
  geom_text(aes(y = conc.um - (0.1 * conc.um)),
    size = 2, color = "white") +
  facet_wrap(vars(well, depth), scales = "free_y") +
  scale_y_continuous(expand = c(0, 0)) +
  theme_bw() +
  labs(
    x = "Amendment",
    y = "Sulfide Concentration (µM)"
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(linetype = "dotted", color = "gray"),
    panel.grid.minor.y = element_blank()
  )
#plotly::ggplotly()
```

# Export and cache

```{r}
saveRDS(object = cline_data_corrected, file = "cache/2023-06-05-cline_data.RDS")
```
